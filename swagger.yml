openapi: 3.0.3
info:
  title: Merchant APIs
  description: |-
    universalmacro
  contact:
    email: chenyunda218@gmail.com
  version: 0.0.4
servers:
  - url: https://uat.uat-hongkong-1-merchant.universalmacro.com
  - url: http://localhost:8080
tags:
  - name: Merchant
  - name: Session
  - name: Member
  - name: Verification
  - name: Order
  - name: Space
paths:
  /sessions:
    post:
      tags:
        - Session
      summary: "Create session"
      operationId: CreateSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionRequest"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
  /merchants/self:
    get:
      tags:
        - Merchant
      summary: "Get self merchant"
      operationId: GetSelfMerchant
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Merchant"
  /merchants/self/config:
    get:
      tags:
        - Merchant
      summary: "Get self merchant config"
      operationId: GetSelfMerchantConfig
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantConfig"
    put:
      tags:
        - Merchant
      summary: "Update self merchant config"
      operationId: UpdateSelfMerchantConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MerchantConfig"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantConfig"
  /merchants/self/members:
    get:
      tags:
        - Merchant
      summary: "Get self merchant"
      operationId: ListSelfMembers
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberList"
  /merchants/self/contact-form:
    get:
      tags:
        - Merchant
      summary: "Get self merchant"
      operationId: ListSelfContactForm
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactFormList"
  /merchants/self/contact-form/{id}:
    get:
      tags:
        - Merchant
      summary: "Get self merchant"
      operationId: GetSelfContactForm
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactForm"
    delete:
      tags:
        - Merchant
      summary: "Delete self merchant"
      operationId: DeleteSelfContactForm
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: "Success"
  /merchants:
    get:
      tags:
        - Merchant
      summary: "List merchants"
      operationId: ListMerchants
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/IndexParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/Ordering"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantList"
    post:
      tags:
        - Merchant
      summary: "Create merchant"
      operationId: CreateMerchant
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMerchantRequest"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Merchant"
  /merchants/{merchantId}:
    get:
      tags:
        - Merchant
      summary: "Get merchant"
      operationId: GetMerchant
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Merchant"
    put:
      tags:
        - Merchant
      summary: "Update merchant"
      operationId: UpdateMerchant
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Merchant"
      responses:
        "204":
          description: "Success"
    delete:
      tags:
        - Merchant
      summary: "Delete merchant"
      operationId: DeleteMerchant
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      responses:
        "204":
          description: "Success"
  /merchants/{merchantId}/password:
    put:
      tags:
        - Merchant
      summary: "Update merchant password by core admin"
      operationId: UpdateMerchantPassword
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "204":
          description: "Success"
  /merchants/{merchantId}/verification-code:
    post:
      tags:
        - Merchant
      summary: "Send verification code"
      operationId: SendMerchantVerificationCode
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVerificationCodeRequest"
      responses:
        "201":
          description: "Created"
  /merchants/{merchantId}/members:
    get:
      tags:
        - Member
      summary: "List members"
      operationId: ListMembers
      parameters:
        - $ref: "#/components/parameters/MerchantId"
        - $ref: "#/components/parameters/IndexParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/Ordering"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberList"
    post:
      tags:
        - Member
      summary: "Create member"
      operationId: CreateMember
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMemberRequest"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
  /merchants/{merchantId}/members/signup:
    post:
      tags:
        - Member
      summary: "Create member"
      operationId: SignupMember
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupMemberRequest"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
  /merchants/{merchantId}/contact-form:
    post:
      tags:
        - Merchant
      summary: "Send contact form"
      operationId: SendContactForm
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MerchantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactForm"
      responses:
        "201":
          description: "Success"
  /verification:
    post:
      tags:
        - Verification
      summary: "Send verification code"
      operationId: SendVerificationCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVerificationCodeRequest"
      responses:
        "201":
          description: "Created"
  /spaces:
    get:
      tags:
        - Space
      summary: "List spaces"
      operationId: ListSpaces
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IndexParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceList"
    post:
      tags:
        - Space
      summary: "Create space"
      operationId: CreateSpace
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveSpaceRequest"
      responses:
        "201":
          description: "Created"
  /spaces/{spaceId}:
    get:
      tags:
        - Space
      summary: "Get space"
      operationId: GetSpace
      parameters:
        - $ref: "#/components/parameters/SpaceID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
    put:
      tags:
        - Space
      summary: "Update space"
      operationId: UpdateSpace
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveSpaceRequest"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
    delete:
      tags:
        - Space
      summary: "Delete space"
      operationId: DeleteSpace
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: "Success"
  /spaces/{spaceId}/parent:
    get:
      tags:
        - Space
      summary: "Get space parent"
      operationId: GetSpaceParent
      parameters:
        - $ref: "#/components/parameters/SpaceID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
  /spaces/{spaceId}/children:
    get:
      tags:
        - Space
      summary: "List space children"
      operationId: ListSpaceChildren
      parameters:
        - $ref: "#/components/parameters/SpaceID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Space"
  /spaces/{spaceId}/orders:
    post:
      tags:
        - Order
      summary: "Create order"
      operationId: CreateOrder
      parameters:
        - $ref: "#/components/parameters/SpaceID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    get:
      tags:
        - Order
      summary: "List orders"
      operationId: ListOrders
      parameters:
        - $ref: "#/components/parameters/SpaceID"
        - $ref: "#/components/parameters/StartAt"
        - $ref: "#/components/parameters/EndAt"
        - in: query
          name: statuses
          schema:
            type: array
            items:
              type: string
        - in: query
          name: tableLabels
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /spaces/{spaceId}/printers:
    get:
      tags:
        - Space
      summary: "List printers"
      operationId: ListPrinters
      parameters:
        - $ref: "#/components/parameters/SpaceID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Printer"
    post:
      tags:
        - Space
      summary: "Create printer"
      operationId: CreatePrinter
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavePrinter"
      responses:
        "201":
          description: "Created"
  /spaces/printers/{printerId}:
    get:
      tags:
        - Space
      summary: "Get printer"
      operationId: GetPrinter
      parameters:
        - in: path
          name: printerId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Printer"
    put:
      tags:
        - Space
      summary: "Update printer"
      operationId: UpdatePrinter
      parameters:
        - in: path
          name: printerId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavePrinter"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Printer"
    delete:
      tags:
        - Space
      summary: "Delete printer"
      operationId: DeletePrinter
      parameters:
        - in: path
          name: printerId
          schema:
            type: string
          required: true
      responses:
        "204":
          description: "Success"
  /spaces/{spaceId}/foods:
    get:
      tags:
        - Order
      summary: "List foods"
      operationId: ListFoods
      parameters:
        - $ref: "#/components/parameters/SpaceID"
        - $ref: "#/components/parameters/IndexParam"
        - $ref: "#/components/parameters/LimitParam"
        - in: query
          name: statuses
          schema:
            $ref: "#/components/schemas/FoodStatus"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
    post:
      tags:
        - Order
      summary: "Create food"
      operationId: CreateFood
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveFoodRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
  /spaces/{spaceId}/foods/categories:
    get:
      tags:
        - Order
      summary: "List food categories"
      parameters:
        - $ref: "#/components/parameters/SpaceID"
      operationId: ListFoodCategories
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      tags:
        - Order
      summary: "Update food categories"
      operationId: UpdateFoodCategories
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /spaces/foods/{id}:
    get:
      tags:
        - Order
      summary: "Get food"
      operationId: GetFoodById
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
    put:
      tags:
        - Order
      summary: "Update food"
      operationId: UpdateFood
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveFoodRequest"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
    delete:
      tags:
        - Order
      summary: "Delete food"
      operationId: DeleteFood
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: "Success"
  /spaces/foods/{id}/printers:
    get:
      tags:
        - Order
      summary: "List food printers"
      operationId: ListFoodPrinters
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Printer"
    put:
      tags:
        - Order
      summary: "Update food printers"
      operationId: UpdateFoodPrinters
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFoodPrintersRequest"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Printer"
  /spaces/foods/{id}/image:
    put:
      tags:
        - Order
      summary: "Update food image"
      operationId: UpdateFoodImage
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
  /spaces/{spaceId}/tables:
    get:
      tags:
        - Order
      summary: "List tables"
      operationId: ListTables
      parameters:
        - $ref: "#/components/parameters/SpaceID"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Table"
    post:
      tags:
        - Order
      summary: "Create table"
      operationId: CreateTable
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveTableRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
  /spaces/tables/{id}:
    put:
      tags:
        - Order
      summary: "Update table"
      operationId: UpdateTable
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveTableRequest"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
    delete:
      tags:
        - Order
      summary: "Delete table"
      operationId: DeleteTable
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: "Success"
  /orders/{orderId}/tableLabel:
    put:
      tags:
        - Order
      summary: "Update order table label"
      operationId: UpdateOrderTableLabel
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderTableLabelRequest"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders/{orderId}/cancel:
    patch:
      tags:
        - Order
      summary: "Update order status"
      operationId: CancelOrder
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelOrderRequest"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders/{orderId}/addition:
    patch:
      tags:
        - Order
      summary: "Update order status"
      operationId: AddOrder
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddOrderRequest"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders/bills/print:
    post:
      tags:
        - Order
      summary: "Print bill"
      operationId: PrintBill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBillRequest"
      responses:
        "200":
          description: "Printed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bill"
  /orders/bills/statistics:
    get:
      tags:
        - Order
      summary: "Get bill statistics"
      operationId: GetBillStatistics
      parameters:
        - $ref: "#/components/parameters/StartAt"
        - $ref: "#/components/parameters/EndAt"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bill"
  /orders/bills:
    post:
      tags:
        - Order
      summary: "Create bill"
      operationId: CreateBill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBillRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bill"
    get:
      tags:
        - Order
      summary: "List bills"
      operationId: ListBills
      parameters:
        - $ref: "#/components/parameters/StartAt"
        - $ref: "#/components/parameters/EndAt"
        - in: query
          name: spaceId
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bill"
  /orders/bills/{billId}:
    get:
      tags:
        - Order
      summary: "Get bill"
      operationId: GetBill
      parameters:
        - in: path
          name: billId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bill"
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: ApiKey
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    MerchantConfig:
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/Currency"
    Currency:
      type: string
      enum: [HKD, USD, CNY, MOP]
    Menu:
      type: object
      required:
        - foods
      properties:
        foods:
          type: array
          items:
            $ref: "#/components/schemas/Food"
    SaveSpaceRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
    Space:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    SpaceList:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Space"
        pagination:
          $ref: "#/components/schemas/Pagination"
    CreateVerificationCodeRequest:
      type: object
      properties:
        merchantId:
          type: string
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
    SignupMemberRequest:
      properties:
        merchantId:
          type: string
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        verificationCode:
          type: string
    CreateMemberRequest:
      type: object
      properties:
        merchantId:
          type: string
        verificationCode:
          type: string
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
    Member:
      type: object
      required:
        - id
        - merchantId
        - name
        - phoneNumber
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        merchantId:
          type: string
        name:
          type: string
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    MemberList:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Member"
        pagination:
          $ref: "#/components/schemas/Pagination"
    CreateMerchantRequest:
      type: object
      required:
        - shortMerchantId
        - account
        - password
      properties:
        shortMerchantId:
          type: string
        account:
          type: string
        password:
          type: string
    Merchant:
      type: object
      required:
        - id
        - shortMerchantId
        - account
        - name
        - description
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        shortMerchantId:
          type: string
        account:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    MerchantList:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Merchant"
        pagination:
          $ref: "#/components/schemas/Pagination"
    PhoneNumber:
      type: object
      required:
        - countryCode
        - number
      properties:
        countryCode:
          type: string
        number:
          type: string
    CreateSessionRequest:
      description: "Login request"
      type: object
      properties:
        shortMerchantId:
          type: string
        account:
          type: string
        password:
          type: string
    CreateAdminRequest:
      description: "Create admin request schema"
      required:
        - account
        - password
      type: object
      properties:
        account:
          type: string
        password:
          type: string
        role:
          $ref: "#/components/schemas/Role"
    Session:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    Role:
      type: string
      enum: [ROOT, ADMIN]
    UpdatePasswordRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
        oldPassword:
          type: string
    Ordering:
      description: "Ordering"
      type: string
      enum: [ASCENDING, DESCENDING]
    Pagination:
      description: "Pagination"
      type: object
      required:
        - index
        - limit
        - total
      properties:
        index:
          type: integer
          format: int64
          description: "Current page"
        limit:
          type: integer
          format: int64
          description: "Amount per page"
        total:
          type: integer
          format: int64
          description: "Total page"
    ContactForm:
      type: object
      properties:
        name:
          type: string
        phone:
          $ref: "#/components/schemas/PhoneNumber"
        email:
          type: string
        subject:
          type: string
        message:
          type: string
    ContactFormList:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ContactForm"
        pagination:
          $ref: "#/components/schemas/Pagination"
    # Order
    Bill:
      type: object
      required:
        - id
        - amount
        - orders
        - createdAt
      properties:
        id:
          type: string
        amount:
          type: integer
          format: int64
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        createdAt:
          type: integer
          format: int64
    BillList:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Bill"
        pagination:
          $ref: "#/components/schemas/Pagination"
    BillStatistics:
      type: object
      required:
        - amount
        - count
      properties:
        amount:
          type: integer
          format: int64
        count:
          type: integer
          format: int64
    CreateBillRequest:
      type: object
      required:
        - amount
        - orderIds
      properties:
        amount:
          type: integer
          format: int64
        orderIds:
          type: array
          items:
            type: string
    SaveFoodRequest:
      type: object
      required:
        - name
        - price
        - description
        - image
        - attributes
        - categories
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        fixedOffset:
          type: integer
          format: int64
        image:
          type: string
          format: url
        categories:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/FoodStatus"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/FoodAttribute"
    Food:
      type: object
      required:
        - id
        - name
        - description
        - price
        - image
        - status
        - categories
        - attributes
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        fixedOffset:
          type: integer
          format: int64
        image:
          type: string
        status:
          $ref: "#/components/schemas/FoodStatus"
        categories:
          type: array
          items:
            type: string
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/FoodAttribute"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    FoodStatus:
      type: string
      enum: [AVAILABLE, UNAVAILABLE]
    FoodAttribute:
      type: object
      required:
        - label
        - options
      properties:
        label:
          type: string
        options:
          type: array
          items:
            $ref: "#/components/schemas/FoodAttributesOption"
    FoodAttributesOption:
      type: object
      required:
        - label
      properties:
        label:
          type: string
        extra:
          type: integer
          format: int64
    AddOrderRequest:
      type: object
      required:
        - foods
      properties:
        foods:
          type: array
          items:
            $ref: "#/components/schemas/FoodSpec"
    CancelOrderRequest:
      type: object
      required:
        - foods
      properties:
        foods:
          type: array
          items:
            $ref: "#/components/schemas/FoodSpec"
    UpdateOrderTableLabelRequest:
      type: object
      properties:
        tableLabel:
          type: string
    CreateOrderRequest:
      type: object
      required:
        - foods
      properties:
        tableLabel:
          type: string
        remark:
          type: string
        foods:
          type: array
          items:
            $ref: "#/components/schemas/FoodSpec"
    FoodSpec:
      type: object
      required:
        - food
      properties:
        food:
          $ref: "#/components/schemas/Food"
        spec:
          type: array
          items:
            $ref: "#/components/schemas/Spec"
    Spec:
      type: object
      required:
        - attribute
        - optioned
      properties:
        attribute:
          type: string
        optioned:
          type: string
    UpdateFoodPrintersRequest:
      type: object
      required:
        - printerIds
      properties:
        printerIds:
          type: array
          items:
            type: string
    SavePrinter:
      type: object
      required:
        - sn
        - name
        - type
        - model
      properties:
        name:
          type: string
        sn:
          type: string
        type:
          $ref: "#/components/schemas/PrinterType"
        model:
          $ref: "#/components/schemas/PrinterModel"
    Printer:
      type: object
      required:
        - id
        - name
        - sn
        - type
        - model
      properties:
        id:
          type: string
        name:
          type: string
        sn:
          type: string
        type:
          $ref: "#/components/schemas/PrinterType"
        model:
          $ref: "#/components/schemas/PrinterModel"
    PrinterType:
      type: string
      enum: [KITCHEN, CASHIER]
    PrinterModel:
      type: string
      enum: [F80MM, F58MM]
    Order:
      type: object
      required:
        - id
        - code
        - foods
        - createdAt
        - updatedAt
        - status
      properties:
        id:
          type: string
        code:
          type: string
        tableLabel:
          type: string
        foods:
          type: array
          items:
            $ref: "#/components/schemas/FoodSpec"
        status:
          $ref: "#/components/schemas/OrderStatus"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    OrderStatus:
      type: string
      enum: [SUBMITTED, CANCELLED, COMPLETED]
    SaveTableRequest:
      type: object
      required:
        - label
      properties:
        label:
          type: string
    Table:
      type: object
      required:
        - id
        - label
      properties:
        id:
          type: string
        label:
          type: string
  parameters:
    Ordering:
      name: ordering
      description: "ASCENDING or DESCENDING"
      in: query
      schema:
        $ref: "#/components/schemas/Ordering"
    IndexParam:
      name: index
      in: query
      description: "Current page index"
      schema:
        type: integer
        minimum: 0
        default: 0
    LimitParam:
      name: limit
      in: query
      description: "Total pages"
      schema:
        type: integer
        minimum: 1
        default: 1
    ID:
      in: path
      name: id
      schema:
        type: string
      required: true
    MerchantId:
      in: path
      name: merchantId
      schema:
        type: string
      required: true
    SpaceID:
      in: path
      name: spaceId
      schema:
        type: string
      required: true
    FoodID:
      in: path
      name: foodID
      schema:
        type: string
      required: true
    StartAt:
      in: query
      name: startAt
      schema:
        type: integer
        format: int64
    EndAt:
      in: query
      name: endAt
      schema:
        type: integer
        format: int64
